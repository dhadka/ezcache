name: Tests

on:
  push:
    branches: [ master ]
    paths-ignore:
      - README.md
      - LICENSE
      - .gitignore
      - .prettierrc 
  pull_request:
    branches: [ master ]
    paths-ignore:
      - README.md
      - LICENSE
      - .gitignore
      - .prettierrc 

jobs:

  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm install
      - run: npm run build
      - run: npm test
      - name: Ensure dist/ folder is up-to-date
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          if [ "$(git diff --ignore-space-at-eol | wc -l)" -gt "0" ]; then
            echo "Detected uncommitted changes after build.  See status below:"
            git diff
            exit 1
          fi

  test-nuget:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: nuget install Newtonsoft.Json
      - name: Cache nuget
        uses: ./
        with:
          type: nuget
          version: v1

  test-run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache per run
        uses: ./
        with:
          type: run
          path: ~/.npm
      - name: Install dependencies
        run: npm ci

  # ======================================================================
  # Auto
  # ======================================================================

  save-auto:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Auto cache
        uses: ./
        with:
          type: auto
          verson: ${{ github.run_id }}
      - name: Install dependencies
        run: npm ci

  # ======================================================================
  # Daily Cache
  # ======================================================================

  test-daily:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Daily cache
        uses: ./
        with:
          type: daily
          path: nodejs
      - name: Checkout node source code
        uses: actions/checkout@v2
        with:
          repository: nodejs/node
          path: nodejs

  # ======================================================================
  # Diff Cache
  # ======================================================================

  save-diff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache diff
        uses: ./
        with:
          type: diff
          path: cache
          version: ${{ github.run_id }}
      - name: Create cache content
        run: |
          mkdir cache
          echo "v1" > cache/version.txt

  update-diff:
    needs: save-diff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache diff
        id: cache
        uses: ./
        with:
          type: diff
          path: cache
          version: ${{ github.run_id }}
      - name: Verify restore
        if: steps.cache.outputs.cache-restore-type == 'miss'
        run: |
          echo "Restore failed!"
          exit -1
      - name: Change version
        run: |
          echo "v2" > cache/version.txt 

  verify-diff:
    needs: update-diff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache diff
        id: cache
        uses: ./
        with:
          type: diff
          path: cache
          version: ${{ github.run_id }}
      - name: Verify restore
        if: steps.cache.outputs.cache-restore-type == 'miss'
        run: |
          echo "Restore failed!"
          exit -1
      - name: Verify cache updated
        run: |
          if [[ "$(cat cache/version.txt)" != "v2" ]]; then
            echo "Version was not updated!"
            exit -1
          fi

  # ======================================================================
  # Env Cache
  # ======================================================================

  save-env:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Write cache content
        run: |
          mkdir cache
          echo "v1" > cache/version.txt
      - name: Env cache
        uses: ./
        with:
          type: env
          path: cache
          version: ${{ github.run_id }}

  restore-env:
    needs: save-env
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Env cache
        id: cache
        uses: ./
        with:
          type: env
          path: cache
          version: ${{ github.run_id }}
      - name: Verify restore
        if: steps.cache.outputs.cache-restore-type == 'miss'
        run: |
          echo "Restore failed!"
          exit -1
      - name: Change version but do not update
        run: |
          echo "v2" > cache/version.txt

  update-env:
    needs: restore-env
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Env cache
        id: cache
        uses: ./
        with:
          type: env
          path: cache
          version: ${{ github.run_id }}
      - name: Verify restore
        if: steps.cache.outputs.cache-restore-type == 'miss'
        run: |
          echo "Restore failed!"
          exit -1
      - name: Verify version not changed
        run: |
          if [[ "$(cat cache/version.txt)" != "v1" ]]; then
            echo "Version changed!"
            exit -1
          fi
      - name: Change version and update cache
        run: |
          echo "v2" > cache/version.txt
          echo "UPDATE_CACHE=true" >> $GITHUB_ENV

  verify-env:
    needs: update-env
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Env cache
        id: cache
        uses: ./
        with:
          type: env
          path: cache
          version: ${{ github.run_id }}
      - name: Verify restore
        if: steps.cache.outputs.cache-restore-type == 'miss'
        run: |
          echo "Restore failed!"
          exit -1
      - name: Verify cache updated
        run: |
          if [[ "$(cat cache/version.txt)" != "v2" ]]; then
            echo "Version was not updated!"
            exit -1
          fi

  # ======================================================================
  # Powershell Cache
  # ======================================================================

  save-powershell:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache powershell
        uses: ./
        with:
          type: powershell
          modules: SqlServer, PSScriptAnalyzer
          version: ${{ github.run_id }}
          
  restore-powershell:
    needs: save-powershell
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache powershell
        id: cache
        uses: ./
        with:
          type: powershell
          modules: SqlServer, PSScriptAnalyzer
          version: ${{ github.run_id }}
      - name: Verify restore
        shell: pwsh
        if: steps.cache.outputs.cache-hit != 'true'
        run: Write-Error "Restore failed!"
      - name: Show installed modules
        shell: pwsh
        run: ls ~\Documents\WindowsPowerShell\Modules

  # ======================================================================
  # Script Cache
  # ======================================================================
    
  save-script:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup install script
        run: |
          echo -e "#/bin/bash\nnpm install @actions/cache\necho 'Install finished!'" > install.sh
          chmod +x install.sh
      - name: Cache script
        uses: ./
        with:
          type: script
          script: install.sh
          path: ~/.npm
          version: ${{ github.run_id }}
          
  restore-script:
    needs: save-script
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup install script
        run: |
          echo -e "#/bin/bash\nnpm install @actions/cache\necho 'Install finished!'" > install.sh
          chmod +x install.sh
      - name: Cache script
        id: cache
        uses: ./
        with:
          type: script
          script: install.sh
          path: ~/.npm
          version: ${{ github.run_id }}
      - name: Verify restore
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Restore failed!"
          exit -1

  # ======================================================================
  # Language Tests
  # ======================================================================
          
  save:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - type: pip
            repo: Project-Platypus/Platypus
            script: pip install -r requirements.txt
          - type: maven
            repo: mkyong/maven-examples
            script: |
              cd java-project
              mvn package
          - type: gradle
            repo: pkainulainen/gradle-examples
            script: |
              cd dependency-management
              gradle clean build
          - type: npm
            repo: contentful/the-example-app.nodejs
            script: npm ci
          - type: yarn
            repo: yarnpkg/example-yarn-package
            script: yarn install
          - type: cargo
            repo: AtheMathmo/rusty-machine
            script: cargo build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: ${{ matrix.repo }}
          path: dev
      - name: Cache ${{ matrix.type }}
        uses: ./
        with:
          type: ${{ matrix.type }}
          version: ${{ github.run_id }}
      - name: Run script
        run: |
          cd dev
          ${{ matrix.script }}
          
  restore:
    needs: save
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - type: pip
            repo: Project-Platypus/Platypus
            script: pip install -r requirements.txt
          - type: maven
            repo: mkyong/maven-examples
            script: |
              cd java-project
              mvn package
          - type: gradle
            repo: pkainulainen/gradle-examples
            script: |
              cd dependency-management
              gradle clean build
          - type: npm
            repo: contentful/the-example-app.nodejs
            script: npm ci
          - type: yarn
            repo: yarnpkg/example-yarn-package
            script: yarn install
          - type: cargo
            repo: AtheMathmo/rusty-machine
            script: cargo build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: ${{ matrix.repo }}
          path: dev
      - name: Cache ${{ matrix.type }}
        id: cache
        uses: ./
        with:
          type: ${{ matrix.type }}
          version: ${{ github.run_id }}
      - name: Verify restore
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Restore failed!"
          exit -1
      - name: Run script
        run: |
          cd dev
          ${{ matrix.script }}

  # ======================================================================
  # Local Storage Provider
  # ======================================================================
        
  #save-local-cache:
  #  runs-on: self-hosted
  #  steps:
  #    - uses: actions/checkout@v2
  #    - name: Cache npm
  #      uses: ./
  #      with:
  #        type: npm
  #        version: ${{ github.run_id }}
  #        provider: local
  #    - name: Install dependencies
  #      run: |
  #        npm ci
          
  #restore-local-cache:
  #  runs-on: self-hosted
  #  needs: save-local-cache
  #  steps:
  #    - uses: actions/checkout@v2
  #    - name: Cache npm
  #      id: cache
  #      uses: ./
  #      with:
  #        type: npm
  #        version: ${{ github.run_id }}
  #        provider: local
  #    - name: Verify restore worked
  #      if: steps.cache.outputs.cache-hit != 'true'
  #      run: |
  #        echo "Restore failed!"
  #        exit -1
  #    - name: Install dependencies
  #      run: |
  #        npm ci

  # ======================================================================
  # S3 Storage Provider
  # ======================================================================

  save-aws-cache:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache npm
        uses: ./
        with:
          type: npm
          version: ${{ github.run_id }}
          provider: aws
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          AWS_REGION: us-east-1
      - name: Install dependencies
        run: |
          npm ci

  restore-aws-cache:
    runs-on: ubuntu-latest
    needs: save-aws-cache
    steps:
      - uses: actions/checkout@v2
      - name: Cache npm
        id: cache
        uses: ./
        with:
          type: npm
          version: ${{ github.run_id }}
          provider: aws
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          AWS_REGION: us-east-1
      - name: Verify restore worked
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Restore failed!"
          exit -1
      - name: Install dependencies
        run: |
          npm ci

  save-minio-cache:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Start docker container
        run: |
          docker pull minio/minio:latest
          docker run -d --name minio -p 9000:9000 -e "MINIO_ROOT_USER=${{ secrets.MINIO_ACCESS_KEY }}" -e "MINIO_ROOT_PASSWORD=${{ secrets.MINIO_SECRET_KEY }}" -v $HOME/data:/data minio/minio:latest server /data
          sleep 1
      - name: Cache npm
        uses: ./
        with:
          type: npm
          version: ${{ github.run_id }}
          provider: s3
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.MINIO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          AWS_ENDPOINT: http://127.0.0.1:9000
          AWS_BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          AWS_REGION: us-east-1
      - name: Install dependencies
        run: |
          npm ci

  # ======================================================================
  # Azure Storage Provider
  # ======================================================================

  save-azure-cache:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache npm
        uses: ./
        with:
          type: npm
          version: ${{ github.run_id }}
          provider: azure
        env: 
          SAS_TOKEN: ${{ secrets.SAS_TOKEN }}
          ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT }}
          CONTAINER_NAME: cache
      - name: Install dependencies
        run: |
          npm ci

  restore-azure-cache:
    runs-on: ubuntu-latest
    needs: save-azure-cache
    steps:
      - uses: actions/checkout@v2
      - name: Cache npm
        id: cache
        uses: ./
        with:
          type: npm
          version: ${{ github.run_id }}
          provider: azure
        env: 
          SAS_TOKEN: ${{ secrets.SAS_TOKEN }}
          ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT }}
          CONTAINER_NAME: cache
      - name: Verify restore worked
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Restore failed!"
          exit -1
      - name: Install dependencies
        run: |
          npm ci

  # ======================================================================
  # Docker Caches
  # ======================================================================

  save-layers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        
      - uses: actions/checkout@v2
        with:
          repository: kstaken/dockerfile-examples
          path: dockerfile-examples

      - name: Cache docker layers
        uses: ./
        with:
          type: layers
          version: ${{ github.run_id }}

      - name: Build docker images
        run: |
          cd dockerfile-examples/apache
          docker build --tag apache:dev .
          
  restore-layers:
    runs-on: ubuntu-latest
    needs: save-layers
    steps:
      - uses: actions/checkout@v2
        
      - uses: actions/checkout@v2
        with:
          repository: kstaken/dockerfile-examples
          path: dockerfile-examples

      - name: Cache docker layers
        uses: ./
        with:
          type: layers
          version: ${{ github.run_id }}

      - name: Build docker images
        run: |
          cd dockerfile-examples/apache
          docker build --tag apache:dev .

  save-buildx:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        
      - uses: actions/checkout@v2
        with:
          repository: kstaken/dockerfile-examples
          path: dockerfile-examples

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Cache Buildx
        uses: ./
        with:
          type: buildx
          path: /tmp/.buildx-cache
          version: ${{ github.run_id }}

      - name: Docker Buildx (build)
        run: |
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --platform linux/386 \
            --output "type=image,push=false" \
            --tag apache:dev \
            --file ./dockerfile-examples/apache/Dockerfile \
            ./

  restore-buildx:
    runs-on: ubuntu-latest
    needs: save-buildx
    steps:
      - uses: actions/checkout@v2
        
      - uses: actions/checkout@v2
        with:
          repository: kstaken/dockerfile-examples
          path: dockerfile-examples

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Cache Buildx
        uses: ./
        with:
          type: buildx
          path: /tmp/.buildx-cache
          version: ${{ github.run_id }}

      - name: Docker Buildx (build)
        run: |
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --platform linux/386 \
            --output "type=image,push=false" \
            --tag apache:dev \
            --file ./dockerfile-examples/apache/Dockerfile \
            ./
